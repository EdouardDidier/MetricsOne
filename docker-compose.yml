name: metrics-one
services:
  database: 
    container_name: database
    build:
      context: ./backend/
      target: database
    restart: always
    volumes:
      - ./backend/database/data:/var/lib/postgresql/data
    networks:
      - network
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DBNAME}
    ports:
      - 5432:5432 # Exposed for development
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_DBNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    networks:
      - network
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    ports:
      - 5672:5672 # Exposed for develoment
      - 15672:15672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    volumes:
      - ./backend/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - network
    ports:
      - 9090:9090
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    depends_on:
      prometheus:
        condition: service_healthy
    volumes:
      # - .backend/grafana/data:/var/lib/grafana # Uncomment if you want to persist data
      - ./backend/grafana/provisioning:/etc/grafana/provisioning
      - ./backend/grafana/dashboards:/etc/grafana/dashboards
    networks:
      - network
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - 3001:3000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  api:
    container_name: api
    build:
      context: ./backend/
      target: api
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - network
    environment:
      - SERVER.HTTP.HOST=0.0.0.0
      - SERVER.HTTP.PORT=${API_HTTP_PORT}
      - SERVER.GRPC.HOST=0.0.0.0
      - SERVER.GRPC.PORT=${API_GRPC_PORT}
      - DB.USER=${DB_USER}
      - DB.PASSWORD=${DB_PASSWORD}
      - DB.HOST=database
      - DB.PORT=5432
      - DB.DBNAME=${DB_DBNAME}
      - DB.POOL_MAX_SIZE=${DB_POOL_MAX_SIZE}
      - RABBITMQ.USER=${RABBITMQ_USER}
      - RABBITMQ.PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ.HOST=rabbitmq
      - RABBITMQ.PORT=5672
      - RABBITMQ.QUEUE=${RABBITMQ_QUEUE}
      - RUST_LOG=${RUST_LOG}
    ports:
      - ${API_HTTP_PORT}:${API_HTTP_PORT}
      - ${API_GRPC_PORT}:${API_GRPC_PORT} # Exposed for development

  worker:
    container_name: worker
    build:
      context: ./backend/
      target: worker
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - network
    environment:
      - RABBITMQ.USER=${RABBITMQ_USER}
      - RABBITMQ.PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ.HOST=rabbitmq
      - RABBITMQ.PORT=5672
      - RABBITMQ.QUEUE=${RABBITMQ_QUEUE}
      - API.HOST=api
      - API.PORT=${API_GRPC_PORT}
      - LIVETIMING_URL=${LIVETIMING_URL}
      - RUST_LOG=${RUST_LOG}

  web:
    container_name: web
    build: 
      context: ./frontend/
      target: web
    networks:
      - network
    environment:
      - NODE_ENV=production
      - API_HOST=${API_HOST}
      - API_PORT=${API_HTTP_PORT}
      - IMAGE_URL=${IMAGE_URL}
    ports:
      - ${WEB_PORT}:3000 

networks:
  network: 
    driver: bridge
